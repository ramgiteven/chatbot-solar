trigger:  
  branches:    
    include:      
      - main
  
pool:
  vmImage: 'ubuntu-latest'

variables:
- group: bot-gpt-vars

stages:

- stage: Unittest
  jobs:
  - job: RunUnittest
    steps:
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      
      displayName: 'Install dependencies'

    - script: |
        set -e
        python -m unittest 'test/test.py' 
  
      displayName: 'Run unit tests'

- stage: BuildAndPush
  jobs:
  - job: BuildAndPushImage
    steps:

    - script: |
        set -e
        echo Building Docker image...
        docker build \
          --build-arg AIRTABLE=$(AIRTABLE_API_KEY) \
          --build-arg GOOGLE_CLOUD=$(GOOGLE_CLOUD_API_KEY) \
          --build-arg OPENAI=$(OPENAI_API_KEY) \
          -t $(IMAGE_NAME):$(TAG) .
        docker images
      displayName: 'Build Docker image'

    - script: |
        set -e
        echo Logging in to Amazon ECR...
        aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(ECR_REPOSITORY)
      displayName: 'Login to AWS ECR'
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

    - script: |
        set -e
        echo Tagging image...
        docker tag $(IMAGE_NAME):$(TAG) $(ECR_REPOSITORY)/$(IMAGE_NAME):$(TAG)
        echo Tagging complete
      displayName: 'Tag Docker image'

    - script: |
        set -e
        echo Pushing image to AWS ECR...
        docker push $(ECR_REPOSITORY)/$(IMAGE_NAME):$(TAG)
        echo Image pushed successfully
      displayName: 'Push Docker image to AWS ECR'

- stage: DeployToEC2
  jobs:
  - job: DeployImage
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: none
    - task: DownloadSecureFile@1
      name: sshKey
      inputs:
        secureFile: $(SSH_PRIVATE_KEY)

    - script: |
        set -e
        chmod 400 $(sshKey.secureFilePath)
        ssh -i $(sshKey.secureFilePath) -o StrictHostKeyChecking=no $(AWS_SSH_USER_AND_HOST) "docker system prune -a -f || docker login -u AWS -p $(aws ecr get-login-password --region $(AWS_REGION)) $(ECR_REPOSITORY) && docker pull $(ECR_REPOSITORY)/$(IMAGE_NAME):$(TAG) && docker stop $(IMAGE_NAME) || true && docker rm $(IMAGE_NAME) || true && docker run -d -p 5000:5000 --name $(IMAGE_NAME) $(ECR_REPOSITORY)/$(IMAGE_NAME):$(TAG)"
      displayName: 'Deploy Docker image to EC2'
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
